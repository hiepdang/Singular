proc LRcoeffLG(list lambda, list mu, list gamma)
{
    def oldring = basering;
    int n = max(lambda[1],mu[1],gamma[1]);
    variety G = Grassmannian(n,2*n);
    def r = G.baseRing; setring r;
    poly Qlambda = QtildeClass(lambda);
    poly Qmu = QtildeClass(mu);
    poly Qgamma = QtildeClass(dualList(gamma,n));
    list delta;
    for (int i = 1; i <= n-1; i++)
    {
        delta = delta + list(n-i);
    }
    poly Sdelta = SchubertClass(delta);
    def f = integral(G,Qlambda*Qmu*Qgamma*Sdelta);
    setring oldring;
    return (imap(r,f));
}

proc deg1GWLG(list lambda, list mu, list gamma)
{
    def oldring = basering;
    int n = max(lambda[1],mu[1],gamma[1]);
    if (sumList(lambda) + sumList(mu) + sumList(gamma) <> (n+1)(n+2)/2) {return (0);}
    variety G = Grassmannian(n+1,2*(n+1));
    def r = G.baseRing; setring r;
    poly Qlambda = QtildeClass(lambda);
    poly Qmu = QtildeClass(mu);
    poly Qgamma = QtildeClass(gamma);
    list delta;
    for (int i = 1; i <= n; i++)
    {
        delta = delta + list(n+1-i);
    }
    poly Sdelta = SchubertClass(delta);
    def f = integral(G,Qlambda*Qmu*Qgamma*Sdelta)/2;
    setring oldring;
    return (imap(r,f));
}

static proc dualList(list gamma, int n)
{
    list m;
    for (int i = 1; i <= n; i++)
    {
        int c;
        for (int j = 1; j <= size(gamma); j++)
        {
            if (gamma[j] == n+1-i) {c = c + 1;}
        }
        if (c == 0) {m = m + list(n+1-i);}
        kill c,j;
    }
    return (m);
}

static proc sumList(list p)
{
    int r;
    for (int i = 1; i <= size(p); i++)
    {
        r = r + p[i];
    }
    return (r);
}
